{"ast":null,"code":"import * as Constants from '../../constants';\nimport doublesTheNumber from './doublesTheNumber';\nimport searchesForEventsOnSelectedDate from './searchesForEventsOnSelectedDate';\nexport default function validationNewEvent(firstInputValue, secondInputValue, year, activeDate, allEvent, title, text) {\n  firstInputValue = firstInputValue + ':00';\n  secondInputValue = secondInputValue + ':00'; // helper variables for comparing time\n\n  let firstTime = \"01/01/2000 \" + firstInputValue;\n  let firstTimePlusFifteen = new Date(new Date(firstTime).getTime() + Constants.MINIMUMEVENTTIMELENGTH * 60 * 1000);\n  const hours = doublesTheNumber(firstTimePlusFifteen.getHours());\n  const minutes = doublesTheNumber(firstTimePlusFifteen.getMinutes());\n  firstTimePlusFifteen = hours.toString() + ':' + minutes.toString() + ':00';\n  console.log('@@@@@ firstInputValue', firstInputValue, secondInputValue, firstTimePlusFifteen);\n  let eventOverlayCheck = searchesForEventsOnSelectedDate(year, activeDate, allEvent).every(function (eventTime) {\n    return firstInputValue > eventTime.to || secondInputValue < eventTime.from;\n  });\n  let objResponse = {};\n\n  if (!firstInputValue || !secondInputValue) {\n    alert('error: add time');\n    return objResponse;\n  } else if (firstInputValue > secondInputValue) {\n    alert('error: event start time is longer than the end');\n    return objResponse;\n  } else if (firstTimePlusFifteen > secondInputValue) {\n    alert('error: minimum event duration 15 minutes');\n    return objResponse;\n  } else if (eventOverlayCheck) {\n    return {\n      year: year,\n      monthAndDate: activeDate,\n      from: firstInputValue,\n      to: secondInputValue,\n      title: title,\n      text: text,\n      _id: \"\".concat(year, \" \").concat(activeDate, \" \").concat(firstInputValue)\n    };\n  } else {\n    alert('error: event intersects with an existing one');\n    return objResponse;\n  }\n}\n;","map":{"version":3,"sources":["/home/user/work/project/calendarReact/client/src/components/auxiliary/validationNewEvent.js"],"names":["Constants","doublesTheNumber","searchesForEventsOnSelectedDate","validationNewEvent","firstInputValue","secondInputValue","year","activeDate","allEvent","title","text","firstTime","firstTimePlusFifteen","Date","getTime","MINIMUMEVENTTIMELENGTH","hours","getHours","minutes","getMinutes","toString","console","log","eventOverlayCheck","every","eventTime","to","from","objResponse","alert","monthAndDate","_id"],"mappings":"AAAA,OAAO,KAAKA,SAAZ,MAA2B,iBAA3B;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,+BAAP,MAA4C,mCAA5C;AAEA,eAAe,SAASC,kBAAT,CAA4BC,eAA5B,EACXC,gBADW,EAEXC,IAFW,EAGXC,UAHW,EAIXC,QAJW,EAKXC,KALW,EAMXC,IANW,EAML;AAENN,EAAAA,eAAe,GAAGA,eAAe,GAAE,KAAnC;AACAC,EAAAA,gBAAgB,GAAGA,gBAAgB,GAAE,KAArC,CAHM,CAON;;AACA,MAAIM,SAAS,GAAG,gBAAgBP,eAAhC;AACA,MAAIQ,oBAAoB,GAAG,IAAIC,IAAJ,CAAS,IAAIA,IAAJ,CAASF,SAAT,EAAoBG,OAApB,KAAiCd,SAAS,CAACe,sBAAV,GAAmC,EAAnC,GAAwC,IAAlF,CAA3B;AACA,QAAMC,KAAK,GAAGf,gBAAgB,CAACW,oBAAoB,CAACK,QAArB,EAAD,CAA9B;AACA,QAAMC,OAAO,GAAGjB,gBAAgB,CAACW,oBAAoB,CAACO,UAArB,EAAD,CAAhC;AAEAP,EAAAA,oBAAoB,GAAGI,KAAK,CAACI,QAAN,KAAmB,GAAnB,GAAyBF,OAAO,CAACE,QAAR,EAAzB,GAA8C,KAArE;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqClB,eAArC,EAAsDC,gBAAtD,EAAwEO,oBAAxE;AAEA,MAAIW,iBAAiB,GAAGrB,+BAA+B,CAACI,IAAD,EAAOC,UAAP,EAAmBC,QAAnB,CAA/B,CAA4DgB,KAA5D,CAAkE,UAAUC,SAAV,EAAqB;AAC3G,WAAOrB,eAAe,GAAGqB,SAAS,CAACC,EAA5B,IAAkCrB,gBAAgB,GAAGoB,SAAS,CAACE,IAAtE;AACH,GAFuB,CAAxB;AAGA,MAAIC,WAAW,GAAG,EAAlB;;AACA,MAAI,CAACxB,eAAD,IAAoB,CAACC,gBAAzB,EAA2C;AACvCwB,IAAAA,KAAK,CAAC,iBAAD,CAAL;AACA,WAAOD,WAAP;AACH,GAHD,MAGO,IAAIxB,eAAe,GAAGC,gBAAtB,EAAwC;AAC3CwB,IAAAA,KAAK,CAAC,gDAAD,CAAL;AACA,WAAOD,WAAP;AACH,GAHM,MAGA,IAAIhB,oBAAoB,GAAGP,gBAA3B,EAA6C;AAChDwB,IAAAA,KAAK,CAAC,0CAAD,CAAL;AACA,WAAOD,WAAP;AACH,GAHM,MAGA,IAAIL,iBAAJ,EAAuB;AAC1B,WAAO;AACHjB,MAAAA,IAAI,EAAEA,IADH;AAEHwB,MAAAA,YAAY,EAAEvB,UAFX;AAGHoB,MAAAA,IAAI,EAAEvB,eAHH;AAIHsB,MAAAA,EAAE,EAAErB,gBAJD;AAKHI,MAAAA,KAAK,EAAEA,KALJ;AAMHC,MAAAA,IAAI,EAAEA,IANH;AAOHqB,MAAAA,GAAG,YAAKzB,IAAL,cAAaC,UAAb,cAA2BH,eAA3B;AAPA,KAAP;AASH,GAVM,MAUA;AACHyB,IAAAA,KAAK,CAAC,8CAAD,CAAL;AACA,WAAOD,WAAP;AACH;AACJ;AAAA","sourcesContent":["import * as Constants from '../../constants'\nimport doublesTheNumber from './doublesTheNumber';\nimport searchesForEventsOnSelectedDate from './searchesForEventsOnSelectedDate';\n\nexport default function validationNewEvent(firstInputValue,\n    secondInputValue, \n    year, \n    activeDate, \n    allEvent,\n    title,\n    text) {\n\n    firstInputValue = firstInputValue +':00';\n    secondInputValue = secondInputValue +':00';\n\n\n\n    // helper variables for comparing time\n    let firstTime = \"01/01/2000 \" + firstInputValue;\n    let firstTimePlusFifteen = new Date(new Date(firstTime).getTime() + (Constants.MINIMUMEVENTTIMELENGTH * 60 * 1000));\n    const hours = doublesTheNumber(firstTimePlusFifteen.getHours());\n    const minutes = doublesTheNumber(firstTimePlusFifteen.getMinutes());\n\n    firstTimePlusFifteen = hours.toString() + ':' + minutes.toString() + ':00';\n    console.log('@@@@@ firstInputValue', firstInputValue, secondInputValue, firstTimePlusFifteen);\n\n    let eventOverlayCheck = searchesForEventsOnSelectedDate(year, activeDate, allEvent).every(function (eventTime) {\n        return firstInputValue > eventTime.to || secondInputValue < eventTime.from\n    });\n    let objResponse = {};\n    if (!firstInputValue || !secondInputValue) {\n        alert('error: add time');\n        return objResponse; \n    } else if (firstInputValue > secondInputValue) {\n        alert('error: event start time is longer than the end');\n        return objResponse; \n    } else if (firstTimePlusFifteen > secondInputValue) {\n        alert('error: minimum event duration 15 minutes');\n        return objResponse; \n    } else if (eventOverlayCheck) {\n        return {\n            year: year,\n            monthAndDate: activeDate,\n            from: firstInputValue,\n            to: secondInputValue,\n            title: title,\n            text: text,\n            _id: `${year} ${activeDate} ${firstInputValue}`\n        };\n    } else {\n        alert('error: event intersects with an existing one');\n        return objResponse; \n    }\n};"]},"metadata":{},"sourceType":"module"}