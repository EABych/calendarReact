{"ast":null,"code":"import * as Constants from '../../constants';\nimport doublesTheNumber from './doublesTheNumber';\nimport searchesForEventsOnSelectedDate from './searchesForEventsOnSelectedDate';\n\nfunction plusDoubleZero(time) {\n  console.log('@@@@@ time', time);\n\n  if (time.length < 6) {\n    const newTime = time + ':00';\n    return newTime;\n  } else {\n    return time;\n  }\n}\n\nexport default function validationNewEvent(firstInputValue, secondInputValue, year, activeDate, allEvent, title, text) {\n  firstInputValue = plusDoubleZero(firstInputValue);\n  secondInputValue = plusDoubleZero(secondInputValue); // helper variables for comparing time\n\n  let firstTime = \"01/01/2000 \" + firstInputValue;\n  let firstTimePlusFifteen = new Date(new Date(firstTime).getTime() + Constants.MINIMUMEVENTTIMELENGTH * 60 * 1000);\n  const hours = doublesTheNumber(firstTimePlusFifteen.getHours());\n  const minutes = doublesTheNumber(firstTimePlusFifteen.getMinutes());\n  firstTimePlusFifteen = hours.toString() + ':' + minutes.toString();\n  firstTimePlusFifteen = plusDoubleZero(firstTimePlusFifteen);\n  let eventOverlayCheck = searchesForEventsOnSelectedDate(year, activeDate, allEvent).every(function (eventTime) {\n    return firstInputValue > eventTime.to || secondInputValue < eventTime.from;\n  });\n  let objResponse = {};\n\n  if (!firstInputValue || !secondInputValue) {\n    alert('error: add time');\n    return objResponse;\n  } else if (firstInputValue > secondInputValue) {\n    alert('error: event start time is longer than the end');\n    return objResponse;\n  } else if (firstTimePlusFifteen > secondInputValue) {\n    alert('error: minimum event duration 15 minutes');\n    return objResponse;\n  } else if (eventOverlayCheck) {\n    return {\n      year: year,\n      monthAndDate: activeDate,\n      from: firstInputValue,\n      to: secondInputValue,\n      title: title,\n      text: text,\n      _id: \"\".concat(year, \" \").concat(activeDate, \" \").concat(firstInputValue)\n    };\n  } else {\n    alert('error: event intersects with an existing one');\n    return objResponse;\n  }\n}\n;","map":{"version":3,"sources":["/home/user/work/project/calendarReact/client/src/components/auxiliary/validationNewEvent.js"],"names":["Constants","doublesTheNumber","searchesForEventsOnSelectedDate","plusDoubleZero","time","console","log","length","newTime","validationNewEvent","firstInputValue","secondInputValue","year","activeDate","allEvent","title","text","firstTime","firstTimePlusFifteen","Date","getTime","MINIMUMEVENTTIMELENGTH","hours","getHours","minutes","getMinutes","toString","eventOverlayCheck","every","eventTime","to","from","objResponse","alert","monthAndDate","_id"],"mappings":"AAAA,OAAO,KAAKA,SAAZ,MAA2B,iBAA3B;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,+BAAP,MAA4C,mCAA5C;;AAEA,SAASC,cAAT,CAAwBC,IAAxB,EAA8B;AAE1BC,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,IAA1B;;AACA,MAAIA,IAAI,CAACG,MAAL,GAAc,CAAlB,EAAqB;AACjB,UAAMC,OAAO,GAAGJ,IAAI,GAAE,KAAtB;AACA,WAAOI,OAAP;AACH,GAHD,MAGO;AACH,WAAOJ,IAAP;AACH;AACJ;;AAGD,eAAe,SAASK,kBAAT,CAA4BC,eAA5B,EACXC,gBADW,EAEXC,IAFW,EAGXC,UAHW,EAIXC,QAJW,EAKXC,KALW,EAMXC,IANW,EAML;AAENN,EAAAA,eAAe,GAAGP,cAAc,CAACO,eAAD,CAAhC;AACAC,EAAAA,gBAAgB,GAAGR,cAAc,CAACQ,gBAAD,CAAjC,CAHM,CAKN;;AACA,MAAIM,SAAS,GAAG,gBAAgBP,eAAhC;AACA,MAAIQ,oBAAoB,GAAG,IAAIC,IAAJ,CAAS,IAAIA,IAAJ,CAASF,SAAT,EAAoBG,OAApB,KAAiCpB,SAAS,CAACqB,sBAAV,GAAmC,EAAnC,GAAwC,IAAlF,CAA3B;AACA,QAAMC,KAAK,GAAGrB,gBAAgB,CAACiB,oBAAoB,CAACK,QAArB,EAAD,CAA9B;AACA,QAAMC,OAAO,GAAGvB,gBAAgB,CAACiB,oBAAoB,CAACO,UAArB,EAAD,CAAhC;AACAP,EAAAA,oBAAoB,GAAGI,KAAK,CAACI,QAAN,KAAmB,GAAnB,GAAyBF,OAAO,CAACE,QAAR,EAAhD;AACAR,EAAAA,oBAAoB,GAAEf,cAAc,CAACe,oBAAD,CAApC;AAEA,MAAIS,iBAAiB,GAAGzB,+BAA+B,CAACU,IAAD,EAAOC,UAAP,EAAmBC,QAAnB,CAA/B,CAA4Dc,KAA5D,CAAkE,UAAUC,SAAV,EAAqB;AAC3G,WAAOnB,eAAe,GAAGmB,SAAS,CAACC,EAA5B,IAAkCnB,gBAAgB,GAAGkB,SAAS,CAACE,IAAtE;AACH,GAFuB,CAAxB;AAGA,MAAIC,WAAW,GAAG,EAAlB;;AACA,MAAI,CAACtB,eAAD,IAAoB,CAACC,gBAAzB,EAA2C;AACvCsB,IAAAA,KAAK,CAAC,iBAAD,CAAL;AACA,WAAOD,WAAP;AACH,GAHD,MAGO,IAAItB,eAAe,GAAGC,gBAAtB,EAAwC;AAC3CsB,IAAAA,KAAK,CAAC,gDAAD,CAAL;AACA,WAAOD,WAAP;AACH,GAHM,MAGA,IAAId,oBAAoB,GAAGP,gBAA3B,EAA6C;AAChDsB,IAAAA,KAAK,CAAC,0CAAD,CAAL;AACA,WAAOD,WAAP;AACH,GAHM,MAGA,IAAIL,iBAAJ,EAAuB;AAC1B,WAAO;AACHf,MAAAA,IAAI,EAAEA,IADH;AAEHsB,MAAAA,YAAY,EAAErB,UAFX;AAGHkB,MAAAA,IAAI,EAAErB,eAHH;AAIHoB,MAAAA,EAAE,EAAEnB,gBAJD;AAKHI,MAAAA,KAAK,EAAEA,KALJ;AAMHC,MAAAA,IAAI,EAAEA,IANH;AAOHmB,MAAAA,GAAG,YAAKvB,IAAL,cAAaC,UAAb,cAA2BH,eAA3B;AAPA,KAAP;AASH,GAVM,MAUA;AACHuB,IAAAA,KAAK,CAAC,8CAAD,CAAL;AACA,WAAOD,WAAP;AACH;AACJ;AAAA","sourcesContent":["import * as Constants from '../../constants'\nimport doublesTheNumber from './doublesTheNumber';\nimport searchesForEventsOnSelectedDate from './searchesForEventsOnSelectedDate';\n\nfunction plusDoubleZero(time) {\n\n    console.log('@@@@@ time', time);\n    if (time.length < 6) {\n        const newTime = time +':00';\n        return newTime;\n    } else {\n        return time;\n    }\n}\n\n\nexport default function validationNewEvent(firstInputValue,\n    secondInputValue, \n    year, \n    activeDate, \n    allEvent,\n    title,\n    text) {\n\n    firstInputValue = plusDoubleZero(firstInputValue);\n    secondInputValue = plusDoubleZero(secondInputValue);\n\n    // helper variables for comparing time\n    let firstTime = \"01/01/2000 \" + firstInputValue;\n    let firstTimePlusFifteen = new Date(new Date(firstTime).getTime() + (Constants.MINIMUMEVENTTIMELENGTH * 60 * 1000));\n    const hours = doublesTheNumber(firstTimePlusFifteen.getHours());\n    const minutes = doublesTheNumber(firstTimePlusFifteen.getMinutes());\n    firstTimePlusFifteen = hours.toString() + ':' + minutes.toString();\n    firstTimePlusFifteen =plusDoubleZero(firstTimePlusFifteen);\n\n    let eventOverlayCheck = searchesForEventsOnSelectedDate(year, activeDate, allEvent).every(function (eventTime) {\n        return firstInputValue > eventTime.to || secondInputValue < eventTime.from\n    });\n    let objResponse = {};\n    if (!firstInputValue || !secondInputValue) {\n        alert('error: add time');\n        return objResponse; \n    } else if (firstInputValue > secondInputValue) {\n        alert('error: event start time is longer than the end');\n        return objResponse; \n    } else if (firstTimePlusFifteen > secondInputValue) {\n        alert('error: minimum event duration 15 minutes');\n        return objResponse; \n    } else if (eventOverlayCheck) {\n        return {\n            year: year,\n            monthAndDate: activeDate,\n            from: firstInputValue,\n            to: secondInputValue,\n            title: title,\n            text: text,\n            _id: `${year} ${activeDate} ${firstInputValue}`\n        };\n    } else {\n        alert('error: event intersects with an existing one');\n        return objResponse; \n    }\n};"]},"metadata":{},"sourceType":"module"}