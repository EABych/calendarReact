'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _omit = require('./omit');

var _omit2 = _interopRequireDefault(_omit);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PortalConnector = function () {
  function PortalConnector() {
    var _this = this;

    _classCallCheck(this, PortalConnector);

    this.nextId = 1;
    this.targetsByName = {};
    this.targetsByChildId = {};

    var methodNames = ['registerTarget', 'removeTarget', 'addChild', 'updateChild', 'removeChild'];
    methodNames.forEach(function (name) {
      _this[name] = _this[name].bind(_this);
    });
  }

  _createClass(PortalConnector, [{
    key: 'registerTarget',
    value: function registerTarget(name, portalTarget) {
      if (this.targetsByName[name]) {
        throw Error('Portal with name ' + name + ' already existing.');
      }
      this.targetsByName[name] = {
        targetInstance: portalTarget,
        childrenById: {}
      };
    }
  }, {
    key: 'removeTarget',
    value: function removeTarget(name) {
      delete this.targetsByName[name];
    }
  }, {
    key: 'addChild',
    value: function addChild(targetName, child) {
      var id = 'portalId' + this.nextId++;
      var target = this.targetsByName[targetName];
      if (!target) throw new Error('No target with name ' + targetName + ' found.');
      this.targetsByChildId[id] = target;
      if (!child) return id;
      target.childrenById[id] = child;
      target.targetInstance.updateChildren(Object.values(target.childrenById));
      return id;
    }
  }, {
    key: 'updateChild',
    value: function updateChild(id, child) {
      var target = this.targetsByChildId[id];
      if (!target) throw new Error('No target with id ' + id + ' found.');
      if (!child && !target.childrenById[id]) return;
      if (!child) {
        target.childrenById = (0, _omit2.default)(target.childrenById, id);
      } else {
        target.childrenById[id] = child;
      }
      target.targetInstance.updateChildren(Object.values(target.childrenById));
    }
  }, {
    key: 'removeChild',
    value: function removeChild(id) {
      var target = this.targetsByChildId[id];
      if (!target) throw new Error('No target with id ' + id + ' found.');
      delete this.targetsByChildId[id];
      if (!target.childrenById[id]) return;
      target.childrenById = (0, _omit2.default)(target.childrenById, id);
      target.targetInstance.updateChildren(Object.values(target.childrenById));
    }
  }]);

  return PortalConnector;
}();

exports.default = PortalConnector;